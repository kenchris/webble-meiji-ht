class e{constructor(e="keyval-store",t="keyval"){this.storeName=t,this._dbp=new Promise((r,o)=>{const n=indexedDB.open(e,1);n.onerror=()=>o(n.error),n.onsuccess=()=>r(n.result),n.onupgradeneeded=()=>{n.result.createObjectStore(t)}})}_withIDBStore(e,t){return this._dbp.then(r=>new Promise((o,n)=>{const s=r.transaction(this.storeName,e);s.oncomplete=()=>o(),s.onabort=s.onerror=()=>n(s.error),t(s.objectStore(this.storeName))}))}}let t;function r(){return t||(t=new e),t}function o(e,t=r()){let o;return t._withIDBStore("readonly",t=>{o=t.get(e)}).then(()=>o.result)}function n(e,t,o=r()){return o._withIDBStore("readwrite",r=>{r.put(t,e)})}function s(e,t=r()){return t._withIDBStore("readwrite",t=>{t.delete(e)})}function i(e=r()){return e._withIDBStore("readwrite",e=>{e.clear()})}function u(e=r()){const t=[];return e._withIDBStore("readonly",e=>{(e.openKeyCursor||e.openCursor).call(e).onsuccess=function(){this.result&&(t.push(this.result.key),this.result.continue())}}).then(()=>t)}export{e as Store,i as clear,s as del,o as get,u as keys,n as set};
//# sourceMappingURL=idb-keyval.js.map
