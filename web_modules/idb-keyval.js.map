{"version":3,"file":"idb-keyval.js","sources":["../node_modules/idb-keyval/dist/idb-keyval.mjs"],"sourcesContent":["class Store {\r\n    constructor(dbName = 'keyval-store', storeName = 'keyval') {\r\n        this.storeName = storeName;\r\n        this._dbp = new Promise((resolve, reject) => {\r\n            const openreq = indexedDB.open(dbName, 1);\r\n            openreq.onerror = () => reject(openreq.error);\r\n            openreq.onsuccess = () => resolve(openreq.result);\r\n            // First time setup: create an empty object store\r\n            openreq.onupgradeneeded = () => {\r\n                openreq.result.createObjectStore(storeName);\r\n            };\r\n        });\r\n    }\r\n    _withIDBStore(type, callback) {\r\n        return this._dbp.then(db => new Promise((resolve, reject) => {\r\n            const transaction = db.transaction(this.storeName, type);\r\n            transaction.oncomplete = () => resolve();\r\n            transaction.onabort = transaction.onerror = () => reject(transaction.error);\r\n            callback(transaction.objectStore(this.storeName));\r\n        }));\r\n    }\r\n}\r\nlet store;\r\nfunction getDefaultStore() {\r\n    if (!store)\r\n        store = new Store();\r\n    return store;\r\n}\r\nfunction get(key, store = getDefaultStore()) {\r\n    let req;\r\n    return store._withIDBStore('readonly', store => {\r\n        req = store.get(key);\r\n    }).then(() => req.result);\r\n}\r\nfunction set(key, value, store = getDefaultStore()) {\r\n    return store._withIDBStore('readwrite', store => {\r\n        store.put(value, key);\r\n    });\r\n}\r\nfunction del(key, store = getDefaultStore()) {\r\n    return store._withIDBStore('readwrite', store => {\r\n        store.delete(key);\r\n    });\r\n}\r\nfunction clear(store = getDefaultStore()) {\r\n    return store._withIDBStore('readwrite', store => {\r\n        store.clear();\r\n    });\r\n}\r\nfunction keys(store = getDefaultStore()) {\r\n    const keys = [];\r\n    return store._withIDBStore('readonly', store => {\r\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\r\n        // And openKeyCursor isn't supported by Safari.\r\n        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\r\n            if (!this.result)\r\n                return;\r\n            keys.push(this.result.key);\r\n            this.result.continue();\r\n        };\r\n    }).then(() => keys);\r\n}\n\nexport { Store, get, set, del, clear, keys };\n"],"names":["Store","[object Object]","dbName","storeName","this","_dbp","Promise","resolve","reject","openreq","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","createObjectStore","type","callback","then","db","transaction","oncomplete","onabort","objectStore","store","getDefaultStore","get","key","req","_withIDBStore","set","value","put","del","delete","clear","keys","openKeyCursor","openCursor","call","push","continue"],"mappings":"AAAA,MAAMA,EACFC,YAAYC,EAAS,eAAgBC,EAAY,UAC7CC,KAAKD,UAAYA,EACjBC,KAAKC,KAAO,IAAIC,QAAQ,CAACC,EAASC,KAC9B,MAAMC,EAAUC,UAAUC,KAAKT,EAAQ,GACvCO,EAAQG,QAAU,IAAMJ,EAAOC,EAAQI,OACvCJ,EAAQK,UAAY,IAAMP,EAAQE,EAAQM,QAE1CN,EAAQO,gBAAkB,KACtBP,EAAQM,OAAOE,kBAAkBd,MAI7CF,cAAciB,EAAMC,GAChB,OAAOf,KAAKC,KAAKe,KAAKC,GAAM,IAAIf,QAAQ,CAACC,EAASC,KAC9C,MAAMc,EAAcD,EAAGC,YAAYlB,KAAKD,UAAWe,GACnDI,EAAYC,WAAa,IAAMhB,IAC/Be,EAAYE,QAAUF,EAAYV,QAAU,IAAMJ,EAAOc,EAAYT,OACrEM,EAASG,EAAYG,YAAYrB,KAAKD,gBAIlD,IAAIuB,EACJ,SAASC,IAGL,OAFKD,IACDA,EAAQ,IAAI1B,GACT0B,EAEX,SAASE,EAAIC,EAAKH,EAAQC,KACtB,IAAIG,EACJ,OAAOJ,EAAMK,cAAc,WAAYL,IACnCI,EAAMJ,EAAME,IAAIC,KACjBT,KAAK,IAAMU,EAAIf,QAEtB,SAASiB,EAAIH,EAAKI,EAAOP,EAAQC,KAC7B,OAAOD,EAAMK,cAAc,YAAaL,IACpCA,EAAMQ,IAAID,EAAOJ,KAGzB,SAASM,EAAIN,EAAKH,EAAQC,KACtB,OAAOD,EAAMK,cAAc,YAAaL,IACpCA,EAAMU,OAAOP,KAGrB,SAASQ,EAAMX,EAAQC,KACnB,OAAOD,EAAMK,cAAc,YAAaL,IACpCA,EAAMW,UAGd,SAASC,EAAKZ,EAAQC,KAClB,MAAMW,EAAO,GACb,OAAOZ,EAAMK,cAAc,WAAYL,KAGlCA,EAAMa,eAAiBb,EAAMc,YAAYC,KAAKf,GAAOZ,UAAY,WACzDV,KAAKW,SAEVuB,EAAKI,KAAKtC,KAAKW,OAAOc,KACtBzB,KAAKW,OAAO4B,eAEjBvB,KAAK,IAAMkB"}